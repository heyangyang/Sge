package com.sunny.game.engine.weather{	import com.sunny.game.engine.lang.memory.SObjectPool;		import flash.display.Sprite;	import flash.geom.Rectangle;
	/**	 *	 * <p>	 * SunnyGame的天气-雨	 * </p>	 * <p><strong><font color="#0000ff">Copyright © 2012 Sunny3D. All rights reserved.</font></strong><br>	 * <font color="#0000ff">www.sunny3d.com</font></p>	 * @langversion 3.0	 * @playerversion Flash 11.2	 * @playerversion AIR 3.2	 * @productversion Flex 4.5	 * @author <strong><font color="#0000ff">刘黎明</font></strong><br>	 * <font color="#0000ff">www.liuliming.org</font>	 *	 */	public class SWeatherRain extends SWeather	{		private var _dropAmount : int;		private var _drops : Vector.<SRaindrop> = new Vector.<SRaindrop>();		private var _count : int;		private var _fallSpeed : int;		private var _windSpeed : int;		private var _dir : String;		public function SWeatherRain(parent : Sprite, viewRect : Rectangle, level : int, dir : String)		{			_dir = dir;			super(parent, viewRect, level);			name = "下雨";		}		override public function set level(value : int) : void		{			super.level = value;			switch (level)			{				case 1:					_dropAmount = 100;					_windSpeed = -1;					_fallSpeed = 20;					break;				case 2:					_dropAmount = 150;					_windSpeed = -1;					_fallSpeed = 30;					break;				case 3:					_dropAmount = 300;					_windSpeed = -3;					_fallSpeed = 50;					break;			}			resetProperties(_dropAmount, _fallSpeed, _windSpeed, _dir);		}		public function resetProperties(dropAmount : int, fallSpeed : int, windSpeed : int, dir : String) : void		{			_dropAmount = dropAmount;			_fallSpeed = fallSpeed;			_windSpeed = windSpeed;			_dir = dir;			var len : int = _drops.length;			if (len > 0)			{				var drop : SRaindrop;				if (len > _dropAmount)				{					for (var i : int = len - 1; i >= _dropAmount; i--)					{						drop = _drops[i];						SObjectPool.recycle(drop, SRaindrop);						_drops.splice(i, 1);					}					_count = _dropAmount;				}				for each (drop in _drops)				{					drop.resetProperties(_fallSpeed, _windSpeed, _dir, _viewRect);				}			}		}		override protected function validuateChange() : void		{			super.validuateChange();			for each (var drop : SRaindrop in _drops)			{				drop.setViewRect(_viewRect);			}		}		override public function update() : void		{			super.update();			var drop : SRaindrop;			if (_count < _dropAmount)			{				drop = SObjectPool.getObject(SRaindrop);				if (drop)				{					drop.resetProperties(_fallSpeed, _windSpeed, _dir, _viewRect);				}				else				{					drop = new SRaindrop(this, _fallSpeed, _windSpeed, _dir, _viewRect);				}				_drops.push(drop);				drop.show();				_count++;			}			for each (drop in _drops)			{				drop.update(_deltaOffsetX, _deltaOffsetY, elapsedTimes);			}			_deltaOffsetX = 0;			_deltaOffsetY = 0;		}		override public function toString() : String		{			return 'Rain error';		}		override public function destroy() : void		{			if (_drops)			{				for each (var drop : SRaindrop in _drops)				{					drop.hide();				}				_drops.length = 0;				_drops = null;			}			SObjectPool.dispose(SRaindrop);			super.destroy();		}	}}